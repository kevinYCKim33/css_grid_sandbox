.container {
  background-color: #eee;
  width: 1000px; //normally rem
  margin: 30px auto;

  display: grid;

  // ALL THIS COULD BE VERY USEFUL IN VIDEO UPLOAD
  // we have 6 items inside the container
  // we want 2 rows, 3 columns

  // height: 1000px;
  // grid-template-rows: repeat(2, 1fr);
    // two equivalent rows take up the entire height of the container (i.e. 1000px / 2)
    // fr is more useful and used more for columns
  grid-template-rows: repeat(2, 150px);
    // equivalent to:
    // grid-template-rows: 150px 150px;

  grid-template-columns: repeat(3, 1fr);
    // we want 3 columns to take all equal space of the available container width

  // grid-template-columns: 50% 1fr 1fr;
    // first column takes 50% of container width; remaining two split evenly what they can
    // 50% is unaffected by the gutter width;
    // fr's sizes shrink pending gutter width;

  // grid-template-columns: 1fr 2fr 1fr;
    // three columns where the mid col is double the size of the other two


  // grid-template-columns: repeat(2, 150px) 1fr;
    // 150px 150px then third column takes up rest of the container width
      // very similar to flex-grow: 1

  // grid-template-columns: repeat(2, 150px) 300px;
    // equivalent to:
    // grid-template-columns: 150px 150px 300px;

  // grid-template-columns: repeat(3, 150px);
    // equivalent to:
    // grid-template-columns: 150px 150px 150px;

  grid-gap: 30px; // do both rows and columns
    // grid-row-gap: 20px; //gap in row //gutter width
    // grid-column-gap: 30px; //





  // no floats, no html tricks; no row of 3, row of 3
  // firefox pwns for grid
} // END CONTAINER

.item {
  padding: 20px;
  font-size: 30px;
  font-family: sans-serif;
  color: white;

  // PUT top-left cell into bottom mid edge of 2x3 grid
  // everything else slides around dynamically
  &--1 {
    background-color: orangered;
    grid-row: 2 / 3;
      // grid-row-start: 2;
      // grid-row-end: 3;
    grid-column: 2 / 3;
      // grid-column-start: 2;
      // grid-column-end: 3;
  }
  &--2 {background-color: yellowgreen;  }
  &--3 {background-color: blueviolet;  }
  &--4 {background-color: palevioletred;  }

  // put bot left to top right
  &--5 {
    background-color: royalblue;
    grid-row: 1 / 2;
    grid-column: 3 / 4;
      // grid-area: 1 / 3 / 2 / 4;
      // equivalent but rather confusing...

  }

  // put bot-right to top mid exercise
  &--6 {
    background-color: goldenrod;
    grid-row: 1 / 2;
    grid-column: 2 / 3;
    // grid-area: 1 / 2 / 2 / 3;
  }

}
